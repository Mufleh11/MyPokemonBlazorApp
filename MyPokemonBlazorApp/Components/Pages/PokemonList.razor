@rendermode InteractiveServer
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.QuickGrid




<div class="row g-0">
    <div class="col-md-12">
        <button class="btn btn-primary float-end" @onclick="ShowAddPokemon">
            Add Pokemon
        </button>
    </div>
</div>

@if (showForm)
{


    <div class="card">
        <div class="card-body bg-light">
            <h4 class="card-title">
                @(model.Id == 0 ? "Add Pokemon" : "Edit Pokemon")
            </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />

                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText class="form-control" placeholder="Name" @bind-Value="model.Name" />
                         <ValidationMessage For="@(() => model.Name)" />
                    </div>
                    <div class="col-md-3">
                        <label for="type" class="form-label">Type</label>
                        <InputText class="form-control" placeholder="Type" @bind-Value="model.Type" />
                        <ValidationMessage For="@(() => model.Type)" />
                    </div>
                    <div class="col-md-3">
                        <label for="total" class="form-label">Total</label>
                        <InputNumber class="form-control" @bind-Value="model.Total" />
                        <ValidationMessage For="@(() => model.Total)" />

                    </div>
                    <div class="col-md-3">
                        <label for="hp" class="form-label">HP</label>
                        <InputNumber class="form-control" @bind-Value="model.HP" />
                        <ValidationMessage For="@(() => model.HP)" />
                    </div>
                    <div class="col-md-3">
                        <label for="attack" class="form-label">Attack</label>
                        <InputNumber class="form-control" @bind-Value="model.Attack" />
                        <ValidationMessage For="@(() => model.Attack)" />
                    </div>
                    <div class="col-md-3">
                        <label for="speed" class="form-label">Speed</label>
                        <InputNumber class="form-control" @bind-Value="model.Speed" />
                        <ValidationMessage For="@(() => model.Speed)" />
                    </div>
                    <div class="col-md-3">
                        <label for="defence" class="form-label">Defence</label>
                        <InputNumber class="form-control" @bind-Value="model.Defence" />
                        <ValidationMessage For="@(() => model.Defence)" />
                    </div>
                    <div class="col-md-3">
                        <label for="generation" class="form-label">Generation</label>
                        <InputNumber class="form-control" @bind-Value="model.Generation" />
                        <ValidationMessage For="@(() => model.Generation)" />
                    </div>
                    <div class="col-md-12">
                        <InputCheckbox class="form-check-input-input" @bind-Value="model.Legendary" />
                        <label for="legendary" class="form-label">Legendary</label>
                    </div>
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary float-end">
                            @(model.Id == 0 ? "Add Pokemon" : "Edit Pokemon")
                        </button>
                    </div>


                </div>
            </EditForm>
        </div>
    </div>
}



<Pokemongrid />


@code {


    private void Edit(Pokemon pokemon)
    {
        model = pokemon;
        editContext = new EditContext(model);
        showForm = true;

    }

    private List<Pokemon>? pokemons;
    private EditContext editContext;
    private Pokemon model;
    private bool showForm;

    private void Info(Pokemon pokemon)
    {
        NavigationManager.NavigateTo($"/Info/{pokemon.Id}");
    }

    private void ShowAddPokemon()
    {
        model = new Pokemon();
        editContext = new EditContext(model);
        showForm = true;
    }

    private async Task Submit()

    {
        if(model.Id == 0)      
            DbContext.Pokemons.Add(model);


        else      
            DbContext.Pokemons.Update(model);



        await DbContext.SaveChangesAsync();
        await Refresh();


    }


    protected override async Task OnInitializedAsync()
    {
        await Refresh();

    }

    private async Task Refresh()
    {
        model = new Pokemon();
        editContext = new EditContext(model);
        pokemons = await DbContext.Pokemons.ToListAsync();
    }




    private async Task Delete(Pokemon pokemon)
    {

        DbContext.Pokemons.Remove(pokemon);
        await DbContext.SaveChangesAsync();
        await Refresh();
    }

}
